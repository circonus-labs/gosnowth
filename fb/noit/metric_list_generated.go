// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package noit

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MetricListT struct {
	Metrics []*MetricT
}

func MetricListPack(builder *flatbuffers.Builder, t *MetricListT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	metricsOffset := flatbuffers.UOffsetT(0)
	if t.Metrics != nil {
		metricsLength := len(t.Metrics)
		metricsOffsets := make([]flatbuffers.UOffsetT, metricsLength)
		for j := 0; j < metricsLength; j++ {
			metricsOffsets[j] = MetricPack(builder, t.Metrics[j])
		}
		MetricListStartMetricsVector(builder, metricsLength)
		for j := metricsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(metricsOffsets[j])
		}
		metricsOffset = builder.EndVector(metricsLength)
	}
	MetricListStart(builder)
	MetricListAddMetrics(builder, metricsOffset)
	return MetricListEnd(builder)
}

func (rcv *MetricList) UnPack() *MetricListT {
	if rcv == nil {
		return nil
	}
	t := &MetricListT{}
	metricsLength := rcv.MetricsLength()
	t.Metrics = make([]*MetricT, metricsLength)
	for j := 0; j < metricsLength; j++ {
		x := Metric{}
		rcv.Metrics(&x, j)
		t.Metrics[j] = x.UnPack()
	}
	return t
}

type MetricList struct {
	_tab flatbuffers.Table
}

func GetRootAsMetricList(buf []byte, offset flatbuffers.UOffsetT) *MetricList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MetricList{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MetricList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MetricList) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MetricList) Metrics(obj *Metric, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MetricList) MetricsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MetricListStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MetricListAddMetrics(builder *flatbuffers.Builder, metrics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(metrics), 0)
}
func MetricListStartMetricsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MetricListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
