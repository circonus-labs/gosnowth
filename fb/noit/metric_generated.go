// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package noit

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MetricT struct {
	Timestamp uint64
	CheckName string
	CheckUuid string
	AccountId int32
	Value     *MetricValueT
}

func MetricPack(builder *flatbuffers.Builder, t *MetricT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	checkNameOffset := builder.CreateString(t.CheckName)
	checkUuidOffset := builder.CreateString(t.CheckUuid)
	valueOffset := MetricValuePack(builder, t.Value)
	MetricStart(builder)
	MetricAddTimestamp(builder, t.Timestamp)
	MetricAddCheckName(builder, checkNameOffset)
	MetricAddCheckUuid(builder, checkUuidOffset)
	MetricAddAccountId(builder, t.AccountId)
	MetricAddValue(builder, valueOffset)
	return MetricEnd(builder)
}

func (rcv *Metric) UnPack() *MetricT {
	if rcv == nil {
		return nil
	}
	t := &MetricT{}
	t.Timestamp = rcv.Timestamp()
	t.CheckName = string(rcv.CheckName())
	t.CheckUuid = string(rcv.CheckUuid())
	t.AccountId = rcv.AccountId()
	t.Value = rcv.Value(nil).UnPack()
	return t
}

type Metric struct {
	_tab flatbuffers.Table
}

func GetRootAsMetric(buf []byte, offset flatbuffers.UOffsetT) *Metric {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Metric{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Metric) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Metric) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Metric) Timestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Metric) MutateTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Metric) CheckName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Metric) CheckUuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Metric) AccountId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Metric) MutateAccountId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Metric) Value(obj *MetricValue) *MetricValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MetricValue)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MetricStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MetricAddTimestamp(builder *flatbuffers.Builder, timestamp uint64) {
	builder.PrependUint64Slot(0, timestamp, 0)
}
func MetricAddCheckName(builder *flatbuffers.Builder, checkName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(checkName), 0)
}
func MetricAddCheckUuid(builder *flatbuffers.Builder, checkUuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(checkUuid), 0)
}
func MetricAddAccountId(builder *flatbuffers.Builder, accountId int32) {
	builder.PrependInt32Slot(3, accountId, 0)
}
func MetricAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(value), 0)
}
func MetricEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
