// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fetch

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type Kind int8

const (
	KindUNKNOWN         Kind = 0
	KindNUMERIC         Kind = 1
	KindHIST            Kind = 2
	KindHIST_CUMULATIVE Kind = 3
	KindTEXT            Kind = 4
)

var EnumNamesKind = map[Kind]string{
	KindUNKNOWN:         "UNKNOWN",
	KindNUMERIC:         "NUMERIC",
	KindHIST:            "HIST",
	KindHIST_CUMULATIVE: "HIST_CUMULATIVE",
	KindTEXT:            "TEXT",
}

var EnumValuesKind = map[string]Kind{
	"UNKNOWN":         KindUNKNOWN,
	"NUMERIC":         KindNUMERIC,
	"HIST":            KindHIST,
	"HIST_CUMULATIVE": KindHIST_CUMULATIVE,
	"TEXT":            KindTEXT,
}

func (v Kind) String() string {
	if s, ok := EnumNamesKind[v]; ok {
		return s
	}
	return "Kind(" + strconv.FormatInt(int64(v), 10) + ")"
}

type SeriesT struct {
	Type  Series
	Value interface{}
}

func SeriesPack(builder *flatbuffers.Builder, t *SeriesT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case SeriesNumericSeries:
		return NumericSeriesPack(builder, t.Value.(*NumericSeriesT))
	case SeriesHistSeries:
		return HistSeriesPack(builder, t.Value.(*HistSeriesT))
	case SeriesTextSeries:
		return TextSeriesPack(builder, t.Value.(*TextSeriesT))
	}
	return 0
}

func SeriesUnPack(t Series, table flatbuffers.Table) *SeriesT {
	switch t {
	case SeriesNumericSeries:
		x := NumericSeries{_tab: table}
		return &SeriesT{Type: SeriesNumericSeries, Value: x.UnPack()}
	case SeriesHistSeries:
		x := HistSeries{_tab: table}
		return &SeriesT{Type: SeriesHistSeries, Value: x.UnPack()}
	case SeriesTextSeries:
		x := TextSeries{_tab: table}
		return &SeriesT{Type: SeriesTextSeries, Value: x.UnPack()}
	}
	return nil
}

type Series byte

const (
	SeriesNONE          Series = 0
	SeriesNumericSeries Series = 1
	SeriesHistSeries    Series = 2
	SeriesTextSeries    Series = 3
)

var EnumNamesSeries = map[Series]string{
	SeriesNONE:          "NONE",
	SeriesNumericSeries: "NumericSeries",
	SeriesHistSeries:    "HistSeries",
	SeriesTextSeries:    "TextSeries",
}

var EnumValuesSeries = map[string]Series{
	"NONE":          SeriesNONE,
	"NumericSeries": SeriesNumericSeries,
	"HistSeries":    SeriesHistSeries,
	"TextSeries":    SeriesTextSeries,
}

func (v Series) String() string {
	if s, ok := EnumNamesSeries[v]; ok {
		return s
	}
	return "Series(" + strconv.FormatInt(int64(v), 10) + ")"
}

type HistSeriesT struct {
	Values []*HistogramT
}

func HistSeriesPack(builder *flatbuffers.Builder, t *HistSeriesT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	valuesOffset := flatbuffers.UOffsetT(0)
	if t.Values != nil {
		valuesLength := len(t.Values)
		valuesOffsets := make([]flatbuffers.UOffsetT, valuesLength)
		for j := 0; j < valuesLength; j++ {
			valuesOffsets[j] = HistogramPack(builder, t.Values[j])
		}
		HistSeriesStartValuesVector(builder, valuesLength)
		for j := valuesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(valuesOffsets[j])
		}
		valuesOffset = builder.EndVector(valuesLength)
	}
	HistSeriesStart(builder)
	HistSeriesAddValues(builder, valuesOffset)
	return HistSeriesEnd(builder)
}

func (rcv *HistSeries) UnPack() *HistSeriesT {
	if rcv == nil {
		return nil
	}
	t := &HistSeriesT{}
	valuesLength := rcv.ValuesLength()
	t.Values = make([]*HistogramT, valuesLength)
	for j := 0; j < valuesLength; j++ {
		x := Histogram{}
		rcv.Values(&x, j)
		t.Values[j] = x.UnPack()
	}
	return t
}

type HistSeries struct {
	_tab flatbuffers.Table
}

func GetRootAsHistSeries(buf []byte, offset flatbuffers.UOffsetT) *HistSeries {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HistSeries{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *HistSeries) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HistSeries) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HistSeries) Values(obj *Histogram, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *HistSeries) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func HistSeriesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func HistSeriesAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(values), 0)
}
func HistSeriesStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HistSeriesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type TextEntryT struct {
	InternalOffsetMs uint64
	Value            string
}

func TextEntryPack(builder *flatbuffers.Builder, t *TextEntryT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	valueOffset := builder.CreateString(t.Value)
	TextEntryStart(builder)
	TextEntryAddInternalOffsetMs(builder, t.InternalOffsetMs)
	TextEntryAddValue(builder, valueOffset)
	return TextEntryEnd(builder)
}

func (rcv *TextEntry) UnPack() *TextEntryT {
	if rcv == nil {
		return nil
	}
	t := &TextEntryT{}
	t.InternalOffsetMs = rcv.InternalOffsetMs()
	t.Value = string(rcv.Value())
	return t
}

type TextEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsTextEntry(buf []byte, offset flatbuffers.UOffsetT) *TextEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextEntry{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextEntry) InternalOffsetMs() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextEntry) MutateInternalOffsetMs(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *TextEntry) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func TextEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TextEntryAddInternalOffsetMs(builder *flatbuffers.Builder, internalOffsetMs uint64) {
	builder.PrependUint64Slot(0, internalOffsetMs, 0)
}
func TextEntryAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func TextEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type TextMultiValueT struct {
	Entries []*TextEntryT
}

func TextMultiValuePack(builder *flatbuffers.Builder, t *TextMultiValueT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	entriesOffset := flatbuffers.UOffsetT(0)
	if t.Entries != nil {
		entriesLength := len(t.Entries)
		entriesOffsets := make([]flatbuffers.UOffsetT, entriesLength)
		for j := 0; j < entriesLength; j++ {
			entriesOffsets[j] = TextEntryPack(builder, t.Entries[j])
		}
		TextMultiValueStartEntriesVector(builder, entriesLength)
		for j := entriesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(entriesOffsets[j])
		}
		entriesOffset = builder.EndVector(entriesLength)
	}
	TextMultiValueStart(builder)
	TextMultiValueAddEntries(builder, entriesOffset)
	return TextMultiValueEnd(builder)
}

func (rcv *TextMultiValue) UnPack() *TextMultiValueT {
	if rcv == nil {
		return nil
	}
	t := &TextMultiValueT{}
	entriesLength := rcv.EntriesLength()
	t.Entries = make([]*TextEntryT, entriesLength)
	for j := 0; j < entriesLength; j++ {
		x := TextEntry{}
		rcv.Entries(&x, j)
		t.Entries[j] = x.UnPack()
	}
	return t
}

type TextMultiValue struct {
	_tab flatbuffers.Table
}

func GetRootAsTextMultiValue(buf []byte, offset flatbuffers.UOffsetT) *TextMultiValue {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextMultiValue{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextMultiValue) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextMultiValue) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextMultiValue) Entries(obj *TextEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TextMultiValue) EntriesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TextMultiValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TextMultiValueAddEntries(builder *flatbuffers.Builder, entries flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(entries), 0)
}
func TextMultiValueStartEntriesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TextMultiValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type TextSeriesT struct {
	Values []*TextMultiValueT
}

func TextSeriesPack(builder *flatbuffers.Builder, t *TextSeriesT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	valuesOffset := flatbuffers.UOffsetT(0)
	if t.Values != nil {
		valuesLength := len(t.Values)
		valuesOffsets := make([]flatbuffers.UOffsetT, valuesLength)
		for j := 0; j < valuesLength; j++ {
			valuesOffsets[j] = TextMultiValuePack(builder, t.Values[j])
		}
		TextSeriesStartValuesVector(builder, valuesLength)
		for j := valuesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(valuesOffsets[j])
		}
		valuesOffset = builder.EndVector(valuesLength)
	}
	TextSeriesStart(builder)
	TextSeriesAddValues(builder, valuesOffset)
	return TextSeriesEnd(builder)
}

func (rcv *TextSeries) UnPack() *TextSeriesT {
	if rcv == nil {
		return nil
	}
	t := &TextSeriesT{}
	valuesLength := rcv.ValuesLength()
	t.Values = make([]*TextMultiValueT, valuesLength)
	for j := 0; j < valuesLength; j++ {
		x := TextMultiValue{}
		rcv.Values(&x, j)
		t.Values[j] = x.UnPack()
	}
	return t
}

type TextSeries struct {
	_tab flatbuffers.Table
}

func GetRootAsTextSeries(buf []byte, offset flatbuffers.UOffsetT) *TextSeries {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextSeries{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextSeries) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextSeries) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextSeries) Values(obj *TextMultiValue, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TextSeries) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TextSeriesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TextSeriesAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(values), 0)
}
func TextSeriesStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TextSeriesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type NumericSeriesT struct {
	Values []float64
}

func NumericSeriesPack(builder *flatbuffers.Builder, t *NumericSeriesT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	valuesOffset := flatbuffers.UOffsetT(0)
	if t.Values != nil {
		valuesLength := len(t.Values)
		NumericSeriesStartValuesVector(builder, valuesLength)
		for j := valuesLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.Values[j])
		}
		valuesOffset = builder.EndVector(valuesLength)
	}
	NumericSeriesStart(builder)
	NumericSeriesAddValues(builder, valuesOffset)
	return NumericSeriesEnd(builder)
}

func (rcv *NumericSeries) UnPack() *NumericSeriesT {
	if rcv == nil {
		return nil
	}
	t := &NumericSeriesT{}
	valuesLength := rcv.ValuesLength()
	t.Values = make([]float64, valuesLength)
	for j := 0; j < valuesLength; j++ {
		t.Values[j] = rcv.Values(j)
	}
	return t
}

type NumericSeries struct {
	_tab flatbuffers.Table
}

func GetRootAsNumericSeries(buf []byte, offset flatbuffers.UOffsetT) *NumericSeries {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NumericSeries{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NumericSeries) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NumericSeries) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NumericSeries) Values(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *NumericSeries) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *NumericSeries) MutateValues(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func NumericSeriesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func NumericSeriesAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(values), 0)
}
func NumericSeriesStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func NumericSeriesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type SeriesContainerT struct {
	Kind Kind
	Data *SeriesT
}

func SeriesContainerPack(builder *flatbuffers.Builder, t *SeriesContainerT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dataOffset := SeriesPack(builder, t.Data)

	SeriesContainerStart(builder)
	SeriesContainerAddKind(builder, t.Kind)
	if t.Data != nil {
		SeriesContainerAddDataType(builder, t.Data.Type)
	}
	SeriesContainerAddData(builder, dataOffset)
	return SeriesContainerEnd(builder)
}

func (rcv *SeriesContainer) UnPack() *SeriesContainerT {
	if rcv == nil {
		return nil
	}
	t := &SeriesContainerT{}
	t.Kind = rcv.Kind()
	dataTable := flatbuffers.Table{}
	if rcv.Data(&dataTable) {
		t.Data = SeriesUnPack(rcv.DataType(), dataTable)
	}
	return t
}

type SeriesContainer struct {
	_tab flatbuffers.Table
}

func GetRootAsSeriesContainer(buf []byte, offset flatbuffers.UOffsetT) *SeriesContainer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeriesContainer{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SeriesContainer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeriesContainer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SeriesContainer) Kind() Kind {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Kind(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SeriesContainer) MutateKind(n Kind) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *SeriesContainer) DataType() Series {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Series(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SeriesContainer) MutateDataType(n Series) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *SeriesContainer) Data(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func SeriesContainerStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SeriesContainerAddKind(builder *flatbuffers.Builder, kind Kind) {
	builder.PrependInt8Slot(0, int8(kind), 0)
}
func SeriesContainerAddDataType(builder *flatbuffers.Builder, dataType Series) {
	builder.PrependByteSlot(1, byte(dataType), 0)
}
func SeriesContainerAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func SeriesContainerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type KVPairT struct {
	Key   string
	Value string
}

func KVPairPack(builder *flatbuffers.Builder, t *KVPairT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	keyOffset := builder.CreateString(t.Key)
	valueOffset := builder.CreateString(t.Value)
	KVPairStart(builder)
	KVPairAddKey(builder, keyOffset)
	KVPairAddValue(builder, valueOffset)
	return KVPairEnd(builder)
}

func (rcv *KVPair) UnPack() *KVPairT {
	if rcv == nil {
		return nil
	}
	t := &KVPairT{}
	t.Key = string(rcv.Key())
	t.Value = string(rcv.Value())
	return t
}

type KVPair struct {
	_tab flatbuffers.Table
}

func GetRootAsKVPair(buf []byte, offset flatbuffers.UOffsetT) *KVPair {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KVPair{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KVPair) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KVPair) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KVPair) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KVPair) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func KVPairStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KVPairAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func KVPairAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func KVPairEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type GlobalMetaDataT struct {
	StartMs  uint64
	PeriodMs uint32
	Count    uint32
	Error    []string
	Warning  []string
	Meta     []*KVPairT
}

func GlobalMetaDataPack(builder *flatbuffers.Builder, t *GlobalMetaDataT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	errorOffset := flatbuffers.UOffsetT(0)
	if t.Error != nil {
		errorLength := len(t.Error)
		errorOffsets := make([]flatbuffers.UOffsetT, errorLength)
		for j := 0; j < errorLength; j++ {
			errorOffsets[j] = builder.CreateString(t.Error[j])
		}
		GlobalMetaDataStartErrorVector(builder, errorLength)
		for j := errorLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(errorOffsets[j])
		}
		errorOffset = builder.EndVector(errorLength)
	}
	warningOffset := flatbuffers.UOffsetT(0)
	if t.Warning != nil {
		warningLength := len(t.Warning)
		warningOffsets := make([]flatbuffers.UOffsetT, warningLength)
		for j := 0; j < warningLength; j++ {
			warningOffsets[j] = builder.CreateString(t.Warning[j])
		}
		GlobalMetaDataStartWarningVector(builder, warningLength)
		for j := warningLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(warningOffsets[j])
		}
		warningOffset = builder.EndVector(warningLength)
	}
	metaOffset := flatbuffers.UOffsetT(0)
	if t.Meta != nil {
		metaLength := len(t.Meta)
		metaOffsets := make([]flatbuffers.UOffsetT, metaLength)
		for j := 0; j < metaLength; j++ {
			metaOffsets[j] = KVPairPack(builder, t.Meta[j])
		}
		GlobalMetaDataStartMetaVector(builder, metaLength)
		for j := metaLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(metaOffsets[j])
		}
		metaOffset = builder.EndVector(metaLength)
	}
	GlobalMetaDataStart(builder)
	GlobalMetaDataAddStartMs(builder, t.StartMs)
	GlobalMetaDataAddPeriodMs(builder, t.PeriodMs)
	GlobalMetaDataAddCount(builder, t.Count)
	GlobalMetaDataAddError(builder, errorOffset)
	GlobalMetaDataAddWarning(builder, warningOffset)
	GlobalMetaDataAddMeta(builder, metaOffset)
	return GlobalMetaDataEnd(builder)
}

func (rcv *GlobalMetaData) UnPack() *GlobalMetaDataT {
	if rcv == nil {
		return nil
	}
	t := &GlobalMetaDataT{}
	t.StartMs = rcv.StartMs()
	t.PeriodMs = rcv.PeriodMs()
	t.Count = rcv.Count()
	errorLength := rcv.ErrorLength()
	t.Error = make([]string, errorLength)
	for j := 0; j < errorLength; j++ {
		t.Error[j] = string(rcv.Error(j))
	}
	warningLength := rcv.WarningLength()
	t.Warning = make([]string, warningLength)
	for j := 0; j < warningLength; j++ {
		t.Warning[j] = string(rcv.Warning(j))
	}
	metaLength := rcv.MetaLength()
	t.Meta = make([]*KVPairT, metaLength)
	for j := 0; j < metaLength; j++ {
		x := KVPair{}
		rcv.Meta(&x, j)
		t.Meta[j] = x.UnPack()
	}
	return t
}

type GlobalMetaData struct {
	_tab flatbuffers.Table
}

func GetRootAsGlobalMetaData(buf []byte, offset flatbuffers.UOffsetT) *GlobalMetaData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GlobalMetaData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GlobalMetaData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GlobalMetaData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GlobalMetaData) StartMs() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GlobalMetaData) MutateStartMs(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *GlobalMetaData) PeriodMs() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GlobalMetaData) MutatePeriodMs(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *GlobalMetaData) Count() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GlobalMetaData) MutateCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *GlobalMetaData) Error(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GlobalMetaData) ErrorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GlobalMetaData) Warning(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GlobalMetaData) WarningLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GlobalMetaData) Meta(obj *KVPair, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GlobalMetaData) MetaLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GlobalMetaDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func GlobalMetaDataAddStartMs(builder *flatbuffers.Builder, startMs uint64) {
	builder.PrependUint64Slot(0, startMs, 0)
}
func GlobalMetaDataAddPeriodMs(builder *flatbuffers.Builder, periodMs uint32) {
	builder.PrependUint32Slot(1, periodMs, 0)
}
func GlobalMetaDataAddCount(builder *flatbuffers.Builder, count uint32) {
	builder.PrependUint32Slot(2, count, 0)
}
func GlobalMetaDataAddError(builder *flatbuffers.Builder, error flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(error), 0)
}
func GlobalMetaDataStartErrorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GlobalMetaDataAddWarning(builder *flatbuffers.Builder, warning flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(warning), 0)
}
func GlobalMetaDataStartWarningVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GlobalMetaDataAddMeta(builder *flatbuffers.Builder, meta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(meta), 0)
}
func GlobalMetaDataStartMetaVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GlobalMetaDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type ColumnMetaDataT struct {
	Label string
	Meta  []*KVPairT
}

func ColumnMetaDataPack(builder *flatbuffers.Builder, t *ColumnMetaDataT) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	labelOffset := builder.CreateString(t.Label)
	metaOffset := flatbuffers.UOffsetT(0)
	if t.Meta != nil {
		metaLength := len(t.Meta)
		metaOffsets := make([]flatbuffers.UOffsetT, metaLength)
		for j := 0; j < metaLength; j++ {
			metaOffsets[j] = KVPairPack(builder, t.Meta[j])
		}
		ColumnMetaDataStartMetaVector(builder, metaLength)
		for j := metaLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(metaOffsets[j])
		}
		metaOffset = builder.EndVector(metaLength)
	}
	ColumnMetaDataStart(builder)
	ColumnMetaDataAddLabel(builder, labelOffset)
	ColumnMetaDataAddMeta(builder, metaOffset)
	return ColumnMetaDataEnd(builder)
}

func (rcv *ColumnMetaData) UnPack() *ColumnMetaDataT {
	if rcv == nil {
		return nil
	}
	t := &ColumnMetaDataT{}
	t.Label = string(rcv.Label())
	metaLength := rcv.MetaLength()
	t.Meta = make([]*KVPairT, metaLength)
	for j := 0; j < metaLength; j++ {
		x := KVPair{}
		rcv.Meta(&x, j)
		t.Meta[j] = x.UnPack()
	}
	return t
}

type ColumnMetaData struct {
	_tab flatbuffers.Table
}

func GetRootAsColumnMetaData(buf []byte, offset flatbuffers.UOffsetT) *ColumnMetaData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ColumnMetaData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ColumnMetaData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ColumnMetaData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ColumnMetaData) Label() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ColumnMetaData) Meta(obj *KVPair, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ColumnMetaData) MetaLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ColumnMetaDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ColumnMetaDataAddLabel(builder *flatbuffers.Builder, label flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(label), 0)
}
func ColumnMetaDataAddMeta(builder *flatbuffers.Builder, meta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(meta), 0)
}
func ColumnMetaDataStartMetaVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ColumnMetaDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type DF4T struct {
	Version uint32
	Head    *GlobalMetaDataT
	Meta    []*ColumnMetaDataT
	Columns []*SeriesContainerT
}

func DF4Pack(builder *flatbuffers.Builder, t *DF4T) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	headOffset := GlobalMetaDataPack(builder, t.Head)
	metaOffset := flatbuffers.UOffsetT(0)
	if t.Meta != nil {
		metaLength := len(t.Meta)
		metaOffsets := make([]flatbuffers.UOffsetT, metaLength)
		for j := 0; j < metaLength; j++ {
			metaOffsets[j] = ColumnMetaDataPack(builder, t.Meta[j])
		}
		DF4StartMetaVector(builder, metaLength)
		for j := metaLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(metaOffsets[j])
		}
		metaOffset = builder.EndVector(metaLength)
	}
	columnsOffset := flatbuffers.UOffsetT(0)
	if t.Columns != nil {
		columnsLength := len(t.Columns)
		columnsOffsets := make([]flatbuffers.UOffsetT, columnsLength)
		for j := 0; j < columnsLength; j++ {
			columnsOffsets[j] = SeriesContainerPack(builder, t.Columns[j])
		}
		DF4StartColumnsVector(builder, columnsLength)
		for j := columnsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(columnsOffsets[j])
		}
		columnsOffset = builder.EndVector(columnsLength)
	}
	DF4Start(builder)
	DF4AddVersion(builder, t.Version)
	DF4AddHead(builder, headOffset)
	DF4AddMeta(builder, metaOffset)
	DF4AddColumns(builder, columnsOffset)
	return DF4End(builder)
}

func (rcv *DF4) UnPack() *DF4T {
	if rcv == nil {
		return nil
	}
	t := &DF4T{}
	t.Version = rcv.Version()
	t.Head = rcv.Head(nil).UnPack()
	metaLength := rcv.MetaLength()
	t.Meta = make([]*ColumnMetaDataT, metaLength)
	for j := 0; j < metaLength; j++ {
		x := ColumnMetaData{}
		rcv.Meta(&x, j)
		t.Meta[j] = x.UnPack()
	}
	columnsLength := rcv.ColumnsLength()
	t.Columns = make([]*SeriesContainerT, columnsLength)
	for j := 0; j < columnsLength; j++ {
		x := SeriesContainer{}
		rcv.Columns(&x, j)
		t.Columns[j] = x.UnPack()
	}
	return t
}

type DF4 struct {
	_tab flatbuffers.Table
}

func GetRootAsDF4(buf []byte, offset flatbuffers.UOffsetT) *DF4 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DF4{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DF4) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DF4) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DF4) Version() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DF4) MutateVersion(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *DF4) Head(obj *GlobalMetaData) *GlobalMetaData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(GlobalMetaData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DF4) Meta(obj *ColumnMetaData, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DF4) MetaLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DF4) Columns(obj *SeriesContainer, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DF4) ColumnsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DF4Start(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DF4AddVersion(builder *flatbuffers.Builder, version uint32) {
	builder.PrependUint32Slot(0, version, 0)
}
func DF4AddHead(builder *flatbuffers.Builder, head flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(head), 0)
}
func DF4AddMeta(builder *flatbuffers.Builder, meta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(meta), 0)
}
func DF4StartMetaVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DF4AddColumns(builder *flatbuffers.Builder, columns flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(columns), 0)
}
func DF4StartColumnsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DF4End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
