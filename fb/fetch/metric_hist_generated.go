// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fetch

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HistogramBucket struct {
	_tab flatbuffers.Table
}

func GetRootAsHistogramBucket(buf []byte, offset flatbuffers.UOffsetT) *HistogramBucket {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HistogramBucket{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *HistogramBucket) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HistogramBucket) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HistogramBucket) Val() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HistogramBucket) MutateVal(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *HistogramBucket) Exp() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HistogramBucket) MutateExp(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *HistogramBucket) Count() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HistogramBucket) MutateCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func HistogramBucketStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func HistogramBucketAddVal(builder *flatbuffers.Builder, val int8) {
	builder.PrependInt8Slot(0, val, 0)
}
func HistogramBucketAddExp(builder *flatbuffers.Builder, exp int8) {
	builder.PrependInt8Slot(1, exp, 0)
}
func HistogramBucketAddCount(builder *flatbuffers.Builder, count uint64) {
	builder.PrependUint64Slot(2, count, 0)
}
func HistogramBucketEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type Histogram struct {
	_tab flatbuffers.Table
}

func GetRootAsHistogram(buf []byte, offset flatbuffers.UOffsetT) *Histogram {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Histogram{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Histogram) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Histogram) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Histogram) Buckets(obj *HistogramBucket, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Histogram) BucketsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func HistogramStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func HistogramAddBuckets(builder *flatbuffers.Builder, buckets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(buckets), 0)
}
func HistogramStartBucketsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HistogramEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type MetricHistogramResult struct {
	_tab flatbuffers.Table
}

func GetRootAsMetricHistogramResult(buf []byte, offset flatbuffers.UOffsetT) *MetricHistogramResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MetricHistogramResult{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MetricHistogramResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MetricHistogramResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MetricHistogramResult) Timestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MetricHistogramResult) MutateTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *MetricHistogramResult) Period() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MetricHistogramResult) MutatePeriod(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *MetricHistogramResult) Histogram(obj *Histogram) *Histogram {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Histogram)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MetricHistogramResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func MetricHistogramResultAddTimestamp(builder *flatbuffers.Builder, timestamp uint64) {
	builder.PrependUint64Slot(0, timestamp, 0)
}
func MetricHistogramResultAddPeriod(builder *flatbuffers.Builder, period int32) {
	builder.PrependInt32Slot(1, period, 0)
}
func MetricHistogramResultAddHistogram(builder *flatbuffers.Builder, histogram flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(histogram), 0)
}
func MetricHistogramResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type MetricHistogramResultList struct {
	_tab flatbuffers.Table
}

func GetRootAsMetricHistogramResultList(buf []byte, offset flatbuffers.UOffsetT) *MetricHistogramResultList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MetricHistogramResultList{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MetricHistogramResultList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MetricHistogramResultList) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MetricHistogramResultList) Results(obj *MetricHistogramResult, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MetricHistogramResultList) ResultsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MetricHistogramResultListStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MetricHistogramResultListAddResults(builder *flatbuffers.Builder, results flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(results), 0)
}
func MetricHistogramResultListStartResultsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MetricHistogramResultListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
