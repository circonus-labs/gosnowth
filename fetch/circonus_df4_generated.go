// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fetch

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type Kind int8

const (
	KindUNKNOWN         Kind = 0
	KindNUMERIC         Kind = 1
	KindHIST            Kind = 2
	KindHIST_CUMULATIVE Kind = 3
	KindTEXT            Kind = 4
)

var EnumNamesKind = map[Kind]string{
	KindUNKNOWN:         "UNKNOWN",
	KindNUMERIC:         "NUMERIC",
	KindHIST:            "HIST",
	KindHIST_CUMULATIVE: "HIST_CUMULATIVE",
	KindTEXT:            "TEXT",
}

var EnumValuesKind = map[string]Kind{
	"UNKNOWN":         KindUNKNOWN,
	"NUMERIC":         KindNUMERIC,
	"HIST":            KindHIST,
	"HIST_CUMULATIVE": KindHIST_CUMULATIVE,
	"TEXT":            KindTEXT,
}

func (v Kind) String() string {
	if s, ok := EnumNamesKind[v]; ok {
		return s
	}
	return "Kind(" + strconv.FormatInt(int64(v), 10) + ")"
}

type Series byte

const (
	SeriesNONE          Series = 0
	SeriesNumericSeries Series = 1
	SeriesHistSeries    Series = 2
	SeriesTextSeries    Series = 3
)

var EnumNamesSeries = map[Series]string{
	SeriesNONE:          "NONE",
	SeriesNumericSeries: "NumericSeries",
	SeriesHistSeries:    "HistSeries",
	SeriesTextSeries:    "TextSeries",
}

var EnumValuesSeries = map[string]Series{
	"NONE":          SeriesNONE,
	"NumericSeries": SeriesNumericSeries,
	"HistSeries":    SeriesHistSeries,
	"TextSeries":    SeriesTextSeries,
}

func (v Series) String() string {
	if s, ok := EnumNamesSeries[v]; ok {
		return s
	}
	return "Series(" + strconv.FormatInt(int64(v), 10) + ")"
}

type HistSeries struct {
	_tab flatbuffers.Table
}

func GetRootAsHistSeries(buf []byte, offset flatbuffers.UOffsetT) *HistSeries {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HistSeries{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *HistSeries) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HistSeries) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HistSeries) Values(obj *metrics.Histogram, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *HistSeries) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func HistSeriesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func HistSeriesAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(values), 0)
}
func HistSeriesStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HistSeriesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type TextEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsTextEntry(buf []byte, offset flatbuffers.UOffsetT) *TextEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextEntry{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextEntry) InternalOffsetMs() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextEntry) MutateInternalOffsetMs(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *TextEntry) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func TextEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TextEntryAddInternalOffsetMs(builder *flatbuffers.Builder, internalOffsetMs uint64) {
	builder.PrependUint64Slot(0, internalOffsetMs, 0)
}
func TextEntryAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func TextEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type TextMultiValue struct {
	_tab flatbuffers.Table
}

func GetRootAsTextMultiValue(buf []byte, offset flatbuffers.UOffsetT) *TextMultiValue {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextMultiValue{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextMultiValue) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextMultiValue) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextMultiValue) Entries(obj *TextEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TextMultiValue) EntriesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TextMultiValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TextMultiValueAddEntries(builder *flatbuffers.Builder, entries flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(entries), 0)
}
func TextMultiValueStartEntriesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TextMultiValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type TextSeries struct {
	_tab flatbuffers.Table
}

func GetRootAsTextSeries(buf []byte, offset flatbuffers.UOffsetT) *TextSeries {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextSeries{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextSeries) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextSeries) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextSeries) Values(obj *TextMultiValue, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TextSeries) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TextSeriesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TextSeriesAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(values), 0)
}
func TextSeriesStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TextSeriesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type NumericSeries struct {
	_tab flatbuffers.Table
}

func GetRootAsNumericSeries(buf []byte, offset flatbuffers.UOffsetT) *NumericSeries {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NumericSeries{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NumericSeries) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NumericSeries) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NumericSeries) Values(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *NumericSeries) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *NumericSeries) MutateValues(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func NumericSeriesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func NumericSeriesAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(values), 0)
}
func NumericSeriesStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func NumericSeriesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type SeriesContainer struct {
	_tab flatbuffers.Table
}

func GetRootAsSeriesContainer(buf []byte, offset flatbuffers.UOffsetT) *SeriesContainer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeriesContainer{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SeriesContainer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeriesContainer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SeriesContainer) Kind() Kind {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Kind(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SeriesContainer) MutateKind(n Kind) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *SeriesContainer) DataType() Series {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Series(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SeriesContainer) MutateDataType(n Series) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *SeriesContainer) Data(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func SeriesContainerStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SeriesContainerAddKind(builder *flatbuffers.Builder, kind Kind) {
	builder.PrependInt8Slot(0, int8(kind), 0)
}
func SeriesContainerAddDataType(builder *flatbuffers.Builder, dataType Series) {
	builder.PrependByteSlot(1, byte(dataType), 0)
}
func SeriesContainerAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func SeriesContainerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type KVPair struct {
	_tab flatbuffers.Table
}

func GetRootAsKVPair(buf []byte, offset flatbuffers.UOffsetT) *KVPair {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KVPair{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KVPair) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KVPair) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KVPair) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KVPair) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func KVPairStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KVPairAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func KVPairAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func KVPairEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type GlobalMetaData struct {
	_tab flatbuffers.Table
}

func GetRootAsGlobalMetaData(buf []byte, offset flatbuffers.UOffsetT) *GlobalMetaData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GlobalMetaData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GlobalMetaData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GlobalMetaData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GlobalMetaData) StartMs() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GlobalMetaData) MutateStartMs(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *GlobalMetaData) PeriodMs() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GlobalMetaData) MutatePeriodMs(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *GlobalMetaData) Count() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GlobalMetaData) MutateCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *GlobalMetaData) Error(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GlobalMetaData) ErrorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GlobalMetaData) Warning(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GlobalMetaData) WarningLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GlobalMetaData) Meta(obj *KVPair, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GlobalMetaData) MetaLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GlobalMetaDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func GlobalMetaDataAddStartMs(builder *flatbuffers.Builder, startMs uint64) {
	builder.PrependUint64Slot(0, startMs, 0)
}
func GlobalMetaDataAddPeriodMs(builder *flatbuffers.Builder, periodMs uint32) {
	builder.PrependUint32Slot(1, periodMs, 0)
}
func GlobalMetaDataAddCount(builder *flatbuffers.Builder, count uint32) {
	builder.PrependUint32Slot(2, count, 0)
}
func GlobalMetaDataAddError(builder *flatbuffers.Builder, error flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(error), 0)
}
func GlobalMetaDataStartErrorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GlobalMetaDataAddWarning(builder *flatbuffers.Builder, warning flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(warning), 0)
}
func GlobalMetaDataStartWarningVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GlobalMetaDataAddMeta(builder *flatbuffers.Builder, meta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(meta), 0)
}
func GlobalMetaDataStartMetaVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GlobalMetaDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type ColumnMetaData struct {
	_tab flatbuffers.Table
}

func GetRootAsColumnMetaData(buf []byte, offset flatbuffers.UOffsetT) *ColumnMetaData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ColumnMetaData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ColumnMetaData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ColumnMetaData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ColumnMetaData) Label() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ColumnMetaData) Meta(obj *KVPair, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ColumnMetaData) MetaLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ColumnMetaDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ColumnMetaDataAddLabel(builder *flatbuffers.Builder, label flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(label), 0)
}
func ColumnMetaDataAddMeta(builder *flatbuffers.Builder, meta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(meta), 0)
}
func ColumnMetaDataStartMetaVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ColumnMetaDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type DF4 struct {
	_tab flatbuffers.Table
}

func GetRootAsDF4(buf []byte, offset flatbuffers.UOffsetT) *DF4 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DF4{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DF4) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DF4) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DF4) Version() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DF4) MutateVersion(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *DF4) Head(obj *GlobalMetaData) *GlobalMetaData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(GlobalMetaData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DF4) Meta(obj *ColumnMetaData, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DF4) MetaLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DF4) Columns(obj *SeriesContainer, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DF4) ColumnsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DF4Start(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DF4AddVersion(builder *flatbuffers.Builder, version uint32) {
	builder.PrependUint32Slot(0, version, 0)
}
func DF4AddHead(builder *flatbuffers.Builder, head flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(head), 0)
}
func DF4AddMeta(builder *flatbuffers.Builder, meta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(meta), 0)
}
func DF4StartMetaVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DF4AddColumns(builder *flatbuffers.Builder, columns flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(columns), 0)
}
func DF4StartColumnsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DF4End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
